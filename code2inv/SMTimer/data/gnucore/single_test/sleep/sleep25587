{
    "filename": "sleep",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun unconstrained_ret_mbrtowc_1214_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1378_64 () (_ BitVec 64))\n(declare-fun sym_argv_0_80 () (_ BitVec 80))\n(declare-fun strlen_1199_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1293_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1456_64 () (_ BitVec 64))\n(assert\n (let (($x651572 (= (_ bv0 64) unconstrained_ret_mbrtowc_1214_64)))\n (not $x651572)))\n(assert\n (let (($x1238156 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1214_64)))\n (not $x1238156)))\n(assert\n (let (($x1030772 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1214_64)))\n (not $x1030772)))\n(assert\n (let (($x806 (= (_ bv0 64) unconstrained_ret_mbrtowc_1378_64)))\n (not $x806)))\n(assert\n (let (($x2114 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1378_64)))\n (not $x2114)))\n(assert\n (let (($x360449 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1378_64)))\n (not $x360449)))\n(assert\n (let ((?x499 ((_ extract 63 63) sym_argv_0_80)))\n (= (_ bv0 1) ?x499)))\n(assert\n (let ((?x479 ((_ extract 55 55) sym_argv_0_80)))\n (= (_ bv0 1) ?x479)))\n(assert\n (let ((?x190 ((_ extract 47 47) sym_argv_0_80)))\n (= (_ bv0 1) ?x190)))\n(assert\n (let ((?x522 ((_ extract 39 39) sym_argv_0_80)))\n (= (_ bv0 1) ?x522)))\n(assert\n (let ((?x471 ((_ extract 31 31) sym_argv_0_80)))\n (= (_ bv0 1) ?x471)))\n(assert\n (let ((?x275 ((_ extract 23 23) sym_argv_0_80)))\n (= (_ bv0 1) ?x275)))\n(assert\n (let ((?x672 ((_ extract 15 15) sym_argv_0_80)))\n (= (_ bv0 1) ?x672)))\n(assert\n (let ((?x288 ((_ extract 7 7) sym_argv_0_80)))\n (= (_ bv0 1) ?x288)))\n(assert\n (let ((?x421 ((_ extract 62 56) sym_argv_0_80)))\n (bvule ?x421 (_ bv126 7))))\n(assert\n (let ((?x323 ((_ extract 54 48) sym_argv_0_80)))\n (bvule ?x323 (_ bv126 7))))\n(assert\n (let ((?x483 ((_ extract 46 40) sym_argv_0_80)))\n (bvule ?x483 (_ bv126 7))))\n(assert\n (let ((?x544 ((_ extract 38 32) sym_argv_0_80)))\n (bvule ?x544 (_ bv126 7))))\n(assert\n (let ((?x463 ((_ extract 30 24) sym_argv_0_80)))\n (bvule ?x463 (_ bv126 7))))\n(assert\n (let ((?x424 ((_ extract 22 16) sym_argv_0_80)))\n (bvule ?x424 (_ bv126 7))))\n(assert\n (let ((?x352 ((_ extract 14 8) sym_argv_0_80)))\n (bvule ?x352 (_ bv126 7))))\n(assert\n (let ((?x339 ((_ extract 6 0) sym_argv_0_80)))\n (bvule ?x339 (_ bv126 7))))\n(assert\n (let ((?x195515 ((_ extract 77 72) sym_argv_0_80)))\n (let (($x573223 (bvule ?x195515 (_ bv39 6))))\n (let ((?x1257280 ((_ extract 79 78) sym_argv_0_80)))\n (let (($x445775 (= (_ bv0 2) ?x1257280)))\n (let (($x1316303 (and $x445775 $x573223)))\n (let ((?x1353865 (ite $x1316303 (_ bv2 8) (_ bv1 8))))\n (let (($x455282 (= (_ bv0 8) ?x1353865)))\n (not $x455282)))))))))\n(assert\n (let ((?x16 ((_ extract 79 72) sym_argv_0_80)))\n (= (_ bv65 8) ?x16)))\n(assert\n (let ((?x769076 ((_ extract 69 64) sym_argv_0_80)))\n (let (($x743990 (bvule ?x769076 (_ bv39 6))))\n (let ((?x798260 ((_ extract 71 70) sym_argv_0_80)))\n (let (($x477348 (= (_ bv0 2) ?x798260)))\n (let (($x1635191 (and $x477348 $x743990)))\n (let ((?x702441 (ite $x1635191 (_ bv2 8) (_ bv1 8))))\n (let (($x560870 (= (_ bv0 8) ?x702441)))\n (not $x560870)))))))))\n(assert\n (let ((?x24 ((_ extract 71 64) sym_argv_0_80)))\n (= (_ bv64 8) ?x24)))\n(assert\n (let ((?x1057009 (bvadd (_ bv576460752303357896 64) strlen_1199_64)))\n (let ((?x35 ((_ extract 7 0) sym_argv_0_80)))\n (let (($x598480 (= (_ bv0 8) ?x35)))\n (let ((?x936069 (ite $x598480 (_ bv576460752303357905 64) (_ bv576460752303357906 64))))\n (let ((?x19 ((_ extract 15 8) sym_argv_0_80)))\n (let (($x713291 (= (_ bv0 8) ?x19)))\n (let ((?x354272 (ite $x713291 (_ bv576460752303357904 64) ?x936069)))\n (let ((?x21 ((_ extract 23 16) sym_argv_0_80)))\n (let (($x634450 (= (_ bv0 8) ?x21)))\n (let ((?x1593229 (ite $x634450 (_ bv576460752303357903 64) ?x354272)))\n (let ((?x23 ((_ extract 31 24) sym_argv_0_80)))\n (let (($x1584337 (= (_ bv0 8) ?x23)))\n (let ((?x1509636 (ite $x1584337 (_ bv576460752303357902 64) ?x1593229)))\n (let ((?x27 ((_ extract 39 32) sym_argv_0_80)))\n (let (($x1592305 (= (_ bv0 8) ?x27)))\n (let ((?x475932 (ite $x1592305 (_ bv576460752303357901 64) ?x1509636)))\n (let ((?x29 ((_ extract 47 40) sym_argv_0_80)))\n (let (($x1670495 (= (_ bv0 8) ?x29)))\n (let ((?x1181694 (ite $x1670495 (_ bv576460752303357900 64) ?x475932)))\n (let ((?x31 ((_ extract 55 48) sym_argv_0_80)))\n (let (($x1620016 (= (_ bv0 8) ?x31)))\n (let ((?x1571142 (ite $x1620016 (_ bv576460752303357899 64) ?x1181694)))\n (let ((?x18 ((_ extract 63 56) sym_argv_0_80)))\n (let (($x1604493 (= (_ bv0 8) ?x18)))\n (let ((?x560619 (ite $x1604493 (_ bv576460752303357898 64) ?x1571142)))\n (= ?x560619 ?x1057009)))))))))))))))))))))))))))\n(assert\n (let (($x834516 (= (_ bv0 64) unconstrained_ret_mbrtowc_1293_64)))\n (not $x834516)))\n(assert\n (let (($x1208881 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1293_64)))\n (not $x1208881)))\n(assert\n (let (($x109586 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1293_64)))\n (not $x109586)))\n(assert\n (let (($x1127086 (= (_ bv0 64) unconstrained_ret_mbrtowc_1456_64)))\n (not $x1127086)))\n(assert\n (let (($x616808 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1456_64)))\n (not $x616808)))\n(assert\n (let (($x857020 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1456_64)))\n (not $x857020)))\n(assert\n (let ((?x64045 (bvadd (_ bv1 64) unconstrained_ret_mbrtowc_1214_64)))\n (let ((?x979453 (bvadd ?x64045 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x346642 (bvadd ?x979453 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1513022 (bvadd ?x346642 unconstrained_ret_mbrtowc_1456_64)))\n (let (($x371843 (bvule strlen_1199_64 ?x1513022)))\n (not $x371843)))))))\n(assert\n (let ((?x718743 (bvadd (_ bv576460752303357897 64) unconstrained_ret_mbrtowc_1214_64)))\n (let ((?x595247 (bvadd ?x718743 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1128955 (bvadd ?x595247 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x387164 (bvadd ?x1128955 unconstrained_ret_mbrtowc_1456_64)))\n (bvule (_ bv576460752303357896 64) ?x387164))))))\n(assert\n (let ((?x718743 (bvadd (_ bv576460752303357897 64) unconstrained_ret_mbrtowc_1214_64)))\n (let ((?x595247 (bvadd ?x718743 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1128955 (bvadd ?x595247 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x387164 (bvadd ?x1128955 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x701178 ((_ extract 63 59) ?x387164)))\n (= (_ bv0 5) ?x701178)))))))\n(assert\n (let ((?x1377372 ((_ extract 58 0) unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x844177 ((_ extract 58 0) unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x265367 ((_ extract 58 0) unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1515473 ((_ extract 58 0) unconstrained_ret_mbrtowc_1214_64)))\n (let ((?x1439779 (bvadd (_ bv576460752303357897 59) ?x1515473)))\n (let ((?x1123111 (bvadd ?x1439779 ?x265367)))\n (let ((?x1327276 (bvadd ?x1123111 ?x844177)))\n (let ((?x1080030 (bvadd ?x1327276 ?x1377372)))\n (bvule ?x1080030 (_ bv576460752303357905 59)))))))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (let (($x725516 (and (distinct (_ bv576460752303357904 64) ?x889771) true)))\n (let (($x197104 (and (distinct (_ bv576460752303357905 64) ?x889771) true)))\n (let (($x77398 (and (distinct (_ bv576460752303357896 64) ?x889771) true)))\n (let (($x1182809 (and (distinct (_ bv576460752303357903 64) ?x889771) true)))\n (and $x1182809 $x77398 $x197104 $x725516))))))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (and (distinct ?x889771 (_ bv576460752303357898 64)) true))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (and (distinct ?x889771 (_ bv576460752303357897 64)) true))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (and (distinct ?x889771 (_ bv576460752303357901 64)) true))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (and (distinct ?x889771 (_ bv576460752303357900 64)) true))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (and (distinct ?x889771 (_ bv576460752303357899 64)) true))))))\n(assert\n (let ((?x1666957 (bvadd unconstrained_ret_mbrtowc_1214_64 unconstrained_ret_mbrtowc_1293_64)))\n (let ((?x1098837 (bvadd ?x1666957 unconstrained_ret_mbrtowc_1378_64)))\n (let ((?x1537256 (bvadd ?x1098837 unconstrained_ret_mbrtowc_1456_64)))\n (let ((?x889771 (bvadd ?x1537256 (_ bv576460752303357897 64))))\n (and (distinct ?x889771 (_ bv576460752303357902 64)) true))))))\n(check-sat)\n",
    "time": 100.00033926963806,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=2, tm_hour=12, tm_min=31, tm_sec=30, tm_wday=2, tm_yday=337, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            300.00784277915955
        ]
    }
}