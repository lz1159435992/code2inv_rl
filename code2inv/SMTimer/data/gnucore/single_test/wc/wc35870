{
    "filename": "wc",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun mem_c0000ff0_3453_64 () (_ BitVec 64))\n(assert\n (bvule (_ bv10 64) mem_c0000ff0_3453_64))\n(assert\n (let ((?x155195 (concat (_ bv0 64) mem_c0000ff0_3453_64)))\n (let ((?x648979 (bvmul (_ bv14757395258967641293 128) ?x155195)))\n (let ((?x453864 ((_ extract 127 67) ?x648979)))\n (bvule (_ bv10 61) ?x453864)))))\n(assert\n (let ((?x155195 (concat (_ bv0 64) mem_c0000ff0_3453_64)))\n (let ((?x648979 (bvmul (_ bv14757395258967641293 128) ?x155195)))\n (let ((?x453864 ((_ extract 127 67) ?x648979)))\n (let ((?x42159 (concat (_ bv0 67) ?x453864)))\n (let ((?x613047 (bvmul (_ bv14757395258967641293 128) ?x42159)))\n (let ((?x993965 ((_ extract 127 67) ?x613047)))\n (bvule (_ bv10 61) ?x993965))))))))\n(assert\n (let ((?x155195 (concat (_ bv0 64) mem_c0000ff0_3453_64)))\n (let ((?x648979 (bvmul (_ bv14757395258967641293 128) ?x155195)))\n (let ((?x453864 ((_ extract 127 67) ?x648979)))\n (let ((?x42159 (concat (_ bv0 67) ?x453864)))\n (let ((?x613047 (bvmul (_ bv14757395258967641293 128) ?x42159)))\n (let ((?x993965 ((_ extract 127 67) ?x613047)))\n (let ((?x144956 (concat (_ bv0 67) ?x993965)))\n (let ((?x146274 (bvmul (_ bv14757395258967641293 128) ?x144956)))\n (let ((?x844447 ((_ extract 127 67) ?x146274)))\n (bvule (_ bv10 61) ?x844447)))))))))))\n(assert\n (let ((?x155195 (concat (_ bv0 64) mem_c0000ff0_3453_64)))\n (let ((?x648979 (bvmul (_ bv14757395258967641293 128) ?x155195)))\n (let ((?x453864 ((_ extract 127 67) ?x648979)))\n (let ((?x42159 (concat (_ bv0 67) ?x453864)))\n (let ((?x613047 (bvmul (_ bv14757395258967641293 128) ?x42159)))\n (let ((?x993965 ((_ extract 127 67) ?x613047)))\n (let ((?x144956 (concat (_ bv0 67) ?x993965)))\n (let ((?x146274 (bvmul (_ bv14757395258967641293 128) ?x144956)))\n (let ((?x844447 ((_ extract 127 67) ?x146274)))\n (let ((?x184458 (concat (_ bv0 67) ?x844447)))\n (let ((?x396118 (bvmul (_ bv14757395258967641293 128) ?x184458)))\n (let ((?x544512 ((_ extract 127 67) ?x396118)))\n (bvule (_ bv10 61) ?x544512))))))))))))))\n(assert\n (let ((?x155195 (concat (_ bv0 64) mem_c0000ff0_3453_64)))\n (let ((?x648979 (bvmul (_ bv14757395258967641293 128) ?x155195)))\n (let ((?x453864 ((_ extract 127 67) ?x648979)))\n (let ((?x42159 (concat (_ bv0 67) ?x453864)))\n (let ((?x613047 (bvmul (_ bv14757395258967641293 128) ?x42159)))\n (let ((?x993965 ((_ extract 127 67) ?x613047)))\n (let ((?x144956 (concat (_ bv0 67) ?x993965)))\n (let ((?x146274 (bvmul (_ bv14757395258967641293 128) ?x144956)))\n (let ((?x844447 ((_ extract 127 67) ?x146274)))\n (let ((?x184458 (concat (_ bv0 67) ?x844447)))\n (let ((?x396118 (bvmul (_ bv14757395258967641293 128) ?x184458)))\n (let ((?x544512 ((_ extract 127 67) ?x396118)))\n (let ((?x436799 (concat (_ bv0 67) ?x544512)))\n (let ((?x400663 (bvmul (_ bv14757395258967641293 128) ?x436799)))\n (let ((?x698526 ((_ extract 127 67) ?x400663)))\n (bvule (_ bv10 61) ?x698526)))))))))))))))))\n(assert\n (let ((?x155195 (concat (_ bv0 64) mem_c0000ff0_3453_64)))\n (let ((?x648979 (bvmul (_ bv14757395258967641293 128) ?x155195)))\n (let ((?x453864 ((_ extract 127 67) ?x648979)))\n (let ((?x42159 (concat (_ bv0 67) ?x453864)))\n (let ((?x613047 (bvmul (_ bv14757395258967641293 128) ?x42159)))\n (let ((?x993965 ((_ extract 127 67) ?x613047)))\n (let ((?x144956 (concat (_ bv0 67) ?x993965)))\n (let ((?x146274 (bvmul (_ bv14757395258967641293 128) ?x144956)))\n (let ((?x844447 ((_ extract 127 67) ?x146274)))\n (let ((?x184458 (concat (_ bv0 67) ?x844447)))\n (let ((?x396118 (bvmul (_ bv14757395258967641293 128) ?x184458)))\n (let ((?x544512 ((_ extract 127 67) ?x396118)))\n (let ((?x436799 (concat (_ bv0 67) ?x544512)))\n (let ((?x400663 (bvmul (_ bv14757395258967641293 128) ?x436799)))\n (let ((?x698526 ((_ extract 127 67) ?x400663)))\n (let ((?x896948 (concat (_ bv0 67) ?x698526)))\n (let ((?x70936 (bvmul (_ bv14757395258967641293 128) ?x896948)))\n (let ((?x142826 ((_ extract 127 67) ?x70936)))\n (bvule (_ bv10 61) ?x142826))))))))))))))))))))\n(check-sat)\n",
    "time": 27.273181438446045,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=4, tm_hour=16, tm_min=17, tm_sec=46, tm_wday=4, tm_yday=339, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            16.648374319076538
        ]
    }
}