{
    "filename": "wc",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun mem_c0000ff0_4529_64 () (_ BitVec 64))\n(assert\n (bvule (_ bv10 64) mem_c0000ff0_4529_64))\n(assert\n (let ((?x806195 (concat (_ bv0 64) mem_c0000ff0_4529_64)))\n (let ((?x587924 (bvmul (_ bv14757395258967641293 128) ?x806195)))\n (let ((?x195136 ((_ extract 127 67) ?x587924)))\n (bvule (_ bv10 61) ?x195136)))))\n(assert\n (let ((?x806195 (concat (_ bv0 64) mem_c0000ff0_4529_64)))\n (let ((?x587924 (bvmul (_ bv14757395258967641293 128) ?x806195)))\n (let ((?x195136 ((_ extract 127 67) ?x587924)))\n (let ((?x737533 (concat (_ bv0 67) ?x195136)))\n (let ((?x473168 (bvmul (_ bv14757395258967641293 128) ?x737533)))\n (let ((?x715772 ((_ extract 127 67) ?x473168)))\n (bvule (_ bv10 61) ?x715772))))))))\n(assert\n (let ((?x806195 (concat (_ bv0 64) mem_c0000ff0_4529_64)))\n (let ((?x587924 (bvmul (_ bv14757395258967641293 128) ?x806195)))\n (let ((?x195136 ((_ extract 127 67) ?x587924)))\n (let ((?x737533 (concat (_ bv0 67) ?x195136)))\n (let ((?x473168 (bvmul (_ bv14757395258967641293 128) ?x737533)))\n (let ((?x715772 ((_ extract 127 67) ?x473168)))\n (let ((?x198850 (concat (_ bv0 67) ?x715772)))\n (let ((?x760127 (bvmul (_ bv14757395258967641293 128) ?x198850)))\n (let ((?x288261 ((_ extract 127 67) ?x760127)))\n (bvule (_ bv10 61) ?x288261)))))))))))\n(assert\n (let ((?x806195 (concat (_ bv0 64) mem_c0000ff0_4529_64)))\n (let ((?x587924 (bvmul (_ bv14757395258967641293 128) ?x806195)))\n (let ((?x195136 ((_ extract 127 67) ?x587924)))\n (let ((?x737533 (concat (_ bv0 67) ?x195136)))\n (let ((?x473168 (bvmul (_ bv14757395258967641293 128) ?x737533)))\n (let ((?x715772 ((_ extract 127 67) ?x473168)))\n (let ((?x198850 (concat (_ bv0 67) ?x715772)))\n (let ((?x760127 (bvmul (_ bv14757395258967641293 128) ?x198850)))\n (let ((?x288261 ((_ extract 127 67) ?x760127)))\n (let ((?x686131 (concat (_ bv0 67) ?x288261)))\n (let ((?x17933 (bvmul (_ bv14757395258967641293 128) ?x686131)))\n (let ((?x851923 ((_ extract 127 67) ?x17933)))\n (bvule (_ bv10 61) ?x851923))))))))))))))\n(assert\n (let ((?x806195 (concat (_ bv0 64) mem_c0000ff0_4529_64)))\n (let ((?x587924 (bvmul (_ bv14757395258967641293 128) ?x806195)))\n (let ((?x195136 ((_ extract 127 67) ?x587924)))\n (let ((?x737533 (concat (_ bv0 67) ?x195136)))\n (let ((?x473168 (bvmul (_ bv14757395258967641293 128) ?x737533)))\n (let ((?x715772 ((_ extract 127 67) ?x473168)))\n (let ((?x198850 (concat (_ bv0 67) ?x715772)))\n (let ((?x760127 (bvmul (_ bv14757395258967641293 128) ?x198850)))\n (let ((?x288261 ((_ extract 127 67) ?x760127)))\n (let ((?x686131 (concat (_ bv0 67) ?x288261)))\n (let ((?x17933 (bvmul (_ bv14757395258967641293 128) ?x686131)))\n (let ((?x851923 ((_ extract 127 67) ?x17933)))\n (let ((?x293307 (concat (_ bv0 67) ?x851923)))\n (let ((?x555663 (bvmul (_ bv14757395258967641293 128) ?x293307)))\n (let ((?x789431 ((_ extract 127 67) ?x555663)))\n (bvule (_ bv10 61) ?x789431)))))))))))))))))\n(assert\n (let ((?x806195 (concat (_ bv0 64) mem_c0000ff0_4529_64)))\n (let ((?x587924 (bvmul (_ bv14757395258967641293 128) ?x806195)))\n (let ((?x195136 ((_ extract 127 67) ?x587924)))\n (let ((?x737533 (concat (_ bv0 67) ?x195136)))\n (let ((?x473168 (bvmul (_ bv14757395258967641293 128) ?x737533)))\n (let ((?x715772 ((_ extract 127 67) ?x473168)))\n (let ((?x198850 (concat (_ bv0 67) ?x715772)))\n (let ((?x760127 (bvmul (_ bv14757395258967641293 128) ?x198850)))\n (let ((?x288261 ((_ extract 127 67) ?x760127)))\n (let ((?x686131 (concat (_ bv0 67) ?x288261)))\n (let ((?x17933 (bvmul (_ bv14757395258967641293 128) ?x686131)))\n (let ((?x851923 ((_ extract 127 67) ?x17933)))\n (let ((?x293307 (concat (_ bv0 67) ?x851923)))\n (let ((?x555663 (bvmul (_ bv14757395258967641293 128) ?x293307)))\n (let ((?x789431 ((_ extract 127 67) ?x555663)))\n (let ((?x213910 (concat (_ bv0 67) ?x789431)))\n (let ((?x825383 (bvmul (_ bv14757395258967641293 128) ?x213910)))\n (let ((?x839978 ((_ extract 127 67) ?x825383)))\n (bvule (_ bv10 61) ?x839978))))))))))))))))))))\n(check-sat)\n",
    "time": 13.762957572937012,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=4, tm_hour=19, tm_min=1, tm_sec=59, tm_wday=4, tm_yday=339, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            26.156755924224854
        ]
    }
}