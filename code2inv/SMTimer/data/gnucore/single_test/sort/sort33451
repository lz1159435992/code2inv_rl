{
    "filename": "sort",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun unconstrained_ret_fread_unlocked_1671_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_fread_unlocked_2075_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_fread_unlocked_2197_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_fread_unlocked_1473_64 () (_ BitVec 64))\n(assert\n (let (($x59188 (= (_ bv7703 64) unconstrained_ret_fread_unlocked_1671_64)))\n (not $x59188)))\n(assert\n (let ((?x219114 ((_ extract 5 0) unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x122535 (bvmul (_ bv63 6) ?x219114)))\n (let ((?x81992 (bvadd (_ bv24 6) ?x122535)))\n (let (($x77676 (bvule ?x81992 (_ bv33 6))))\n (let (($x104988 (not $x77676)))\n (let ((?x147189 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x80081 (bvadd (_ bv254168 64) ?x147189)))\n (let ((?x44832 ((_ extract 63 6) ?x80081)))\n (let (($x14891 (= (_ bv0 58) ?x44832)))\n (let (($x152636 (not $x14891)))\n (or $x152636 $x104988))))))))))))\n(assert\n (let ((?x147189 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x143106 (bvadd (_ bv254167 64) ?x147189)))\n (let ((?x59925 (concat (_ bv0 64) ?x143106)))\n (let ((?x69472 (bvudiv ?x59925 (_ bv33 128))))\n (let ((?x127355 ((_ extract 63 0) ?x69472)))\n (= unconstrained_ret_fread_unlocked_2075_64 ?x127355)))))))\n(assert\n (let ((?x3084963 ((_ extract 5 0) unconstrained_ret_fread_unlocked_2075_64)))\n (let ((?x760964 (bvmul (_ bv63 6) ?x3084963)))\n (let ((?x219114 ((_ extract 5 0) unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x122535 (bvmul (_ bv63 6) ?x219114)))\n (let ((?x81992 (bvadd (_ bv24 6) ?x122535)))\n (let ((?x108806 (bvadd ?x81992 ?x760964)))\n (let (($x148208 (bvule ?x108806 (_ bv33 6))))\n (let (($x41255 (not $x148208)))\n (let ((?x99914 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_2075_64)))\n (let ((?x147189 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x80081 (bvadd (_ bv254168 64) ?x147189)))\n (let ((?x47688 (bvadd ?x80081 ?x99914)))\n (let ((?x105813 ((_ extract 63 6) ?x47688)))\n (let (($x65361 (= (_ bv0 58) ?x105813)))\n (let (($x15318 (not $x65361)))\n (or $x15318 $x41255)))))))))))))))))\n(assert\n (let ((?x99914 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_2075_64)))\n (let ((?x147189 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x143106 (bvadd (_ bv254167 64) ?x147189)))\n (let ((?x5565 (bvadd ?x143106 ?x99914)))\n (let ((?x150126 (concat (_ bv0 64) ?x5565)))\n (let ((?x41877 (bvudiv ?x150126 (_ bv33 128))))\n (let ((?x122336 ((_ extract 63 0) ?x41877)))\n (let (($x17754 (= unconstrained_ret_fread_unlocked_2197_64 ?x122336)))\n (not $x17754))))))))))\n(assert\n (let ((?x288352 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_2197_64)))\n (let ((?x99914 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_2075_64)))\n (let ((?x112715 (bvadd (_ bv18446744073709543672 64) ?x99914)))\n (let ((?x72258 (bvadd ?x112715 ?x288352)))\n (let (($x2672 (= unconstrained_ret_fread_unlocked_1671_64 ?x72258)))\n (not $x2672)))))))\n(assert\n (let ((?x288352 (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_2197_64)))\n (let ((?x3092478 (bvadd (bvadd (_ bv18441114570954101017 64) (bvmul (_ bv18446744073709551615 64) unconstrained_ret_fread_unlocked_2075_64)) ?x288352)))\n (= unconstrained_ret_fread_unlocked_1671_64 ?x3092478))))\n(assert\n (= (_ bv7944 64) unconstrained_ret_fread_unlocked_1473_64))\n(assert\n (let ((?x2021 (bvadd (_ bv3221229536 64) unconstrained_ret_fread_unlocked_1473_64)))\n (let ((?x57197 (bvadd ?x2021 unconstrained_ret_fread_unlocked_1671_64)))\n (let ((?x58683 (bvadd ?x57197 unconstrained_ret_fread_unlocked_2075_64)))\n (let ((?x255495 (bvadd ?x58683 unconstrained_ret_fread_unlocked_2197_64)))\n (and (distinct (_ bv18441114574175338497 64) ?x255495) true))))))\n(check-sat)\n",
    "time": 100.0011625289917,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=13, tm_hour=6, tm_min=9, tm_sec=1, tm_wday=6, tm_yday=348, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            0.01228785514831543
        ]
    }
}