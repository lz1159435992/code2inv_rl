{
    "filename": "mkfifo",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun unconstrained_ret_mbrtowc_1500_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1354_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1640_64 () (_ BitVec 64))\n(assert\n (let (($x809 (= (_ bv0 64) unconstrained_ret_mbrtowc_1500_64)))\n (not $x809)))\n(assert\n (let (($x290 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1500_64)))\n (not $x290)))\n(assert\n (let (($x980 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1500_64)))\n (not $x980)))\n(assert\n (let (($x1121 (= (_ bv0 64) unconstrained_ret_mbrtowc_1354_64)))\n (not $x1121)))\n(assert\n (let (($x1111 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1354_64)))\n (not $x1111)))\n(assert\n (let (($x1153 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1354_64)))\n (not $x1153)))\n(assert\n (let (($x19704 (= (_ bv0 64) unconstrained_ret_mbrtowc_1640_64)))\n (not $x19704)))\n(assert\n (let (($x24309 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1640_64)))\n (not $x24309)))\n(assert\n (let (($x25478 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1640_64)))\n (not $x25478)))\n(assert\n (let ((?x16368 (bvadd (_ bv1 64) unconstrained_ret_mbrtowc_1354_64)))\n (let ((?x25369 (bvadd ?x16368 unconstrained_ret_mbrtowc_1500_64)))\n (let ((?x34443 (bvadd ?x25369 unconstrained_ret_mbrtowc_1640_64)))\n (let (($x18424 (bvule (_ bv2 64) ?x34443)))\n (not $x18424))))))\n(assert\n (let ((?x24657 (bvadd (_ bv576460752303357912 64) unconstrained_ret_mbrtowc_1354_64)))\n (let ((?x9329 (bvadd ?x24657 unconstrained_ret_mbrtowc_1500_64)))\n (let ((?x2039 (bvadd ?x9329 unconstrained_ret_mbrtowc_1640_64)))\n (bvule (_ bv576460752303357911 64) ?x2039)))))\n(assert\n (let ((?x24657 (bvadd (_ bv576460752303357912 64) unconstrained_ret_mbrtowc_1354_64)))\n (let ((?x9329 (bvadd ?x24657 unconstrained_ret_mbrtowc_1500_64)))\n (let ((?x2039 (bvadd ?x9329 unconstrained_ret_mbrtowc_1640_64)))\n (let ((?x10544 ((_ extract 63 59) ?x2039)))\n (= (_ bv0 5) ?x10544))))))\n(assert\n (let ((?x37090 ((_ extract 58 0) unconstrained_ret_mbrtowc_1640_64)))\n (let ((?x11813 ((_ extract 58 0) unconstrained_ret_mbrtowc_1500_64)))\n (let ((?x30506 (bvadd (bvadd (_ bv576460752303357912 59) ((_ extract 58 0) unconstrained_ret_mbrtowc_1354_64)) ?x11813)))\n (let ((?x13459 (bvadd ?x30506 ?x37090)))\n (bvule ?x13459 (_ bv576460752303357912 59)))))))\n(assert\n (let ((?x16390 (bvadd unconstrained_ret_mbrtowc_1354_64 unconstrained_ret_mbrtowc_1500_64)))\n (let ((?x16818 (bvadd ?x16390 unconstrained_ret_mbrtowc_1640_64)))\n (let ((?x21671 (bvadd ?x16818 (_ bv576460752303357912 64))))\n (let (($x24848 (and (distinct (_ bv576460752303357912 64) ?x21671) true)))\n (let (($x15643 (and (distinct (_ bv576460752303357911 64) ?x21671) true)))\n (and $x15643 $x24848)))))))\n(check-sat)\n",
    "time": 4.714747905731201,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=1, tm_hour=21, tm_min=51, tm_sec=45, tm_wday=1, tm_yday=336, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            0.8088014125823975
        ]
    }
}