{
    "filename": "readlink",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun unconstrained_ret_mbrtowc_5612_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_5333_64 () (_ BitVec 64))\n(declare-fun sym_argv2_1_16 () (_ BitVec 16))\n(declare-fun strlen_3236_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_5519_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_5426_64 () (_ BitVec 64))\n(assert\n (let (($x13145 (= (_ bv0 64) unconstrained_ret_mbrtowc_5612_64)))\n (not $x13145)))\n(assert\n (let (($x27897 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_5612_64)))\n (not $x27897)))\n(assert\n (let (($x92457 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_5612_64)))\n (not $x92457)))\n(assert\n (let (($x50835 (= (_ bv0 64) unconstrained_ret_mbrtowc_5333_64)))\n (not $x50835)))\n(assert\n (let (($x78096 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_5333_64)))\n (not $x78096)))\n(assert\n (let (($x29224 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_5333_64)))\n (not $x29224)))\n(assert\n (let ((?x10746 ((_ extract 13 8) sym_argv2_1_16)))\n (let (($x9973 (bvule ?x10746 (_ bv39 6))))\n (let ((?x10464 ((_ extract 15 14) sym_argv2_1_16)))\n (let (($x6830 (= (_ bv0 2) ?x10464)))\n (let (($x11731 (and $x6830 $x9973)))\n (let ((?x11725 (ite $x11731 (_ bv2 8) (_ bv1 8))))\n (let (($x16860 (= (_ bv0 8) ?x11725)))\n (not $x16860)))))))))\n(assert\n (let ((?x8131 ((_ extract 15 8) sym_argv2_1_16)))\n (= (_ bv92 8) ?x8131)))\n(assert\n (let ((?x14780 ((_ extract 7 0) sym_argv2_1_16)))\n (let (($x20709 (bvule (_ bv39 8) ?x14780)))\n (let (($x22926 (= (_ bv39 8) ?x14780)))\n (let (($x23663 (or $x22926 $x20709)))\n (let ((?x3444 (ite $x23663 (_ bv0 8) (_ bv255 8))))\n (let (($x4101 (= (_ bv0 8) ?x3444)))\n (let (($x24051 (not $x4101)))\n (let ((?x16090 ((_ extract 5 0) sym_argv2_1_16)))\n (let (($x16743 (bvule ?x16090 (_ bv39 6))))\n (let ((?x1167 ((_ extract 7 6) sym_argv2_1_16)))\n (let (($x20975 (= (_ bv0 2) ?x1167)))\n (let (($x1886 (and $x20975 $x16743)))\n (let ((?x23737 (ite $x1886 (_ bv2 8) (_ bv1 8))))\n (let ((?x3457 (ite $x20709 ?x23737 (_ bv255 8))))\n (let ((?x23770 (ite $x22926 (_ bv0 8) ?x3457)))\n (let (($x3752 (= (_ bv0 8) ?x23770)))\n (let (($x24055 (not $x3752)))\n (or $x24055 $x24051)))))))))))))))))))\n(assert\n (let ((?x2865 ((_ extract 6 0) sym_argv2_1_16)))\n (let (($x595 (bvule ?x2865 (_ bv126 7))))\n (let (($x7247 (not $x595)))\n (let ((?x225 ((_ extract 7 7) sym_argv2_1_16)))\n (let (($x24188 (= (_ bv0 1) ?x225)))\n (let (($x7979 (not $x24188)))\n (or $x7979 $x7247))))))))\n(assert\n (let ((?x50438 (bvadd (_ bv576460752303357910 64) strlen_3236_64)))\n (let ((?x14780 ((_ extract 7 0) sym_argv2_1_16)))\n (let (($x15139 (= (_ bv0 8) ?x14780)))\n (let ((?x4430 (ite $x15139 (_ bv576460752303357911 64) (_ bv576460752303357912 64))))\n (= ?x4430 ?x50438))))))\n(assert\n (let (($x64907 (= (_ bv14 64) strlen_3236_64)))\n (not $x64907)))\n(assert\n (let (($x47096 (bvule (_ bv15 64) strlen_3236_64)))\n (not $x47096)))\n(assert\n (let (($x85296 (= (_ bv0 64) unconstrained_ret_mbrtowc_5519_64)))\n (not $x85296)))\n(assert\n (let (($x90713 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_5519_64)))\n (not $x90713)))\n(assert\n (let (($x79988 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_5519_64)))\n (not $x79988)))\n(assert\n (let (($x22086 (= (_ bv0 64) unconstrained_ret_mbrtowc_5426_64)))\n (not $x22086)))\n(assert\n (let (($x82657 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_5426_64)))\n (not $x82657)))\n(assert\n (let (($x70352 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_5426_64)))\n (not $x70352)))\n(assert\n (let ((?x59792 (bvadd (_ bv18 64) unconstrained_ret_mbrtowc_5333_64)))\n (let ((?x21926 (bvadd ?x59792 unconstrained_ret_mbrtowc_5426_64)))\n (let ((?x89672 (bvadd ?x21926 unconstrained_ret_mbrtowc_5519_64)))\n (let ((?x39461 (bvadd ?x89672 unconstrained_ret_mbrtowc_5612_64)))\n (let (($x20436 (bvule strlen_3236_64 ?x39461)))\n (not $x20436)))))))\n(assert\n (let ((?x59615 (bvadd (_ bv576460752303357928 64) unconstrained_ret_mbrtowc_5333_64)))\n (let ((?x80248 (bvadd ?x59615 unconstrained_ret_mbrtowc_5426_64)))\n (let ((?x87435 (bvadd ?x80248 unconstrained_ret_mbrtowc_5519_64)))\n (let ((?x92905 (bvadd ?x87435 unconstrained_ret_mbrtowc_5612_64)))\n (bvule (_ bv576460752303357910 64) ?x92905))))))\n(assert\n (let ((?x59615 (bvadd (_ bv576460752303357928 64) unconstrained_ret_mbrtowc_5333_64)))\n (let ((?x80248 (bvadd ?x59615 unconstrained_ret_mbrtowc_5426_64)))\n (let ((?x87435 (bvadd ?x80248 unconstrained_ret_mbrtowc_5519_64)))\n (let ((?x92905 (bvadd ?x87435 unconstrained_ret_mbrtowc_5612_64)))\n (let ((?x62922 ((_ extract 63 59) ?x92905)))\n (= (_ bv0 5) ?x62922)))))))\n(assert\n (let ((?x91825 ((_ extract 58 0) unconstrained_ret_mbrtowc_5612_64)))\n (let ((?x91901 ((_ extract 58 0) unconstrained_ret_mbrtowc_5519_64)))\n (let ((?x28404 ((_ extract 58 0) unconstrained_ret_mbrtowc_5426_64)))\n (let ((?x77415 ((_ extract 58 0) unconstrained_ret_mbrtowc_5333_64)))\n (let ((?x43593 (bvadd (_ bv576460752303357928 59) ?x77415)))\n (let ((?x75095 (bvadd ?x43593 ?x28404)))\n (let ((?x75562 (bvadd ?x75095 ?x91901)))\n (let ((?x84766 (bvadd ?x75562 ?x91825)))\n (bvule ?x84766 (_ bv576460752303357911 59)))))))))))\n(assert\n (let ((?x45711 (bvadd unconstrained_ret_mbrtowc_5333_64 unconstrained_ret_mbrtowc_5426_64)))\n (let ((?x66017 (bvadd ?x45711 unconstrained_ret_mbrtowc_5519_64)))\n (let ((?x51018 (bvadd ?x66017 unconstrained_ret_mbrtowc_5612_64)))\n (let ((?x84684 (bvadd ?x51018 (_ bv576460752303357928 64))))\n (let (($x89666 (and (distinct (_ bv576460752303357910 64) ?x84684) true)))\n (let (($x75481 (and (distinct (_ bv576460752303357911 64) ?x84684) true)))\n (and $x75481 $x89666))))))))\n(check-sat)\n",
    "time": 100.00029993057251,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=1, tm_hour=20, tm_min=23, tm_sec=38, tm_wday=1, tm_yday=336, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            80.54097843170166
        ]
    }
}