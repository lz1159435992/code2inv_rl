{
    "filename": "mknod",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun unconstrained_ret_mbrtowc_1428_64 () (_ BitVec 64))\n(declare-fun sym_argv_0_80 () (_ BitVec 80))\n(declare-fun strlen_1255_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1567_64 () (_ BitVec 64))\n(declare-fun unconstrained_ret_mbrtowc_1283_64 () (_ BitVec 64))\n(assert\n (let (($x31420 (= (_ bv0 64) unconstrained_ret_mbrtowc_1428_64)))\n (not $x31420)))\n(assert\n (let (($x40442 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1428_64)))\n (not $x40442)))\n(assert\n (let (($x34910 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1428_64)))\n (not $x34910)))\n(assert\n (let ((?x343 ((_ extract 71 71) sym_argv_0_80)))\n (= (_ bv0 1) ?x343)))\n(assert\n (let ((?x496 ((_ extract 63 63) sym_argv_0_80)))\n (= (_ bv0 1) ?x496)))\n(assert\n (let ((?x646 ((_ extract 55 55) sym_argv_0_80)))\n (= (_ bv0 1) ?x646)))\n(assert\n (let ((?x608 ((_ extract 47 47) sym_argv_0_80)))\n (= (_ bv0 1) ?x608)))\n(assert\n (let ((?x435 ((_ extract 39 39) sym_argv_0_80)))\n (= (_ bv0 1) ?x435)))\n(assert\n (let ((?x543 ((_ extract 31 31) sym_argv_0_80)))\n (= (_ bv0 1) ?x543)))\n(assert\n (let ((?x384 ((_ extract 23 23) sym_argv_0_80)))\n (= (_ bv0 1) ?x384)))\n(assert\n (let ((?x523 ((_ extract 15 15) sym_argv_0_80)))\n (= (_ bv0 1) ?x523)))\n(assert\n (let ((?x460 ((_ extract 7 7) sym_argv_0_80)))\n (= (_ bv0 1) ?x460)))\n(assert\n (let ((?x345 ((_ extract 70 64) sym_argv_0_80)))\n (bvule ?x345 (_ bv126 7))))\n(assert\n (let ((?x557 ((_ extract 62 56) sym_argv_0_80)))\n (bvule ?x557 (_ bv126 7))))\n(assert\n (let ((?x427 ((_ extract 54 48) sym_argv_0_80)))\n (bvule ?x427 (_ bv126 7))))\n(assert\n (let ((?x625 ((_ extract 46 40) sym_argv_0_80)))\n (bvule ?x625 (_ bv126 7))))\n(assert\n (let ((?x633 ((_ extract 38 32) sym_argv_0_80)))\n (bvule ?x633 (_ bv126 7))))\n(assert\n (let ((?x338 ((_ extract 30 24) sym_argv_0_80)))\n (bvule ?x338 (_ bv126 7))))\n(assert\n (let ((?x170 ((_ extract 22 16) sym_argv_0_80)))\n (bvule ?x170 (_ bv126 7))))\n(assert\n (let ((?x469 ((_ extract 14 8) sym_argv_0_80)))\n (bvule ?x469 (_ bv126 7))))\n(assert\n (let ((?x318 ((_ extract 6 0) sym_argv_0_80)))\n (bvule ?x318 (_ bv126 7))))\n(assert\n (let ((?x7584 ((_ extract 77 72) sym_argv_0_80)))\n (let (($x2681 (bvule ?x7584 (_ bv39 6))))\n (let ((?x10031 ((_ extract 79 78) sym_argv_0_80)))\n (let (($x17400 (= (_ bv0 2) ?x10031)))\n (let (($x15041 (and $x17400 $x2681)))\n (let ((?x17732 (ite $x15041 (_ bv2 8) (_ bv1 8))))\n (let (($x7713 (= (_ bv0 8) ?x17732)))\n (not $x7713)))))))))\n(assert\n (let ((?x16 ((_ extract 79 72) sym_argv_0_80)))\n (= (_ bv64 8) ?x16)))\n(assert\n (let ((?x20370 (bvadd (_ bv576460752303357896 64) strlen_1255_64)))\n (let ((?x35 ((_ extract 7 0) sym_argv_0_80)))\n (let (($x8853 (= (_ bv0 8) ?x35)))\n (let ((?x27304 (ite $x8853 (_ bv576460752303357905 64) (_ bv576460752303357906 64))))\n (let ((?x19 ((_ extract 15 8) sym_argv_0_80)))\n (let (($x19002 (= (_ bv0 8) ?x19)))\n (let ((?x16556 (ite $x19002 (_ bv576460752303357904 64) ?x27304)))\n (let ((?x21 ((_ extract 23 16) sym_argv_0_80)))\n (let (($x19422 (= (_ bv0 8) ?x21)))\n (let ((?x27906 (ite $x19422 (_ bv576460752303357903 64) ?x16556)))\n (let ((?x23 ((_ extract 31 24) sym_argv_0_80)))\n (let (($x22509 (= (_ bv0 8) ?x23)))\n (let ((?x17176 (ite $x22509 (_ bv576460752303357902 64) ?x27906)))\n (let ((?x27 ((_ extract 39 32) sym_argv_0_80)))\n (let (($x28433 (= (_ bv0 8) ?x27)))\n (let ((?x26332 (ite $x28433 (_ bv576460752303357901 64) ?x17176)))\n (let ((?x29 ((_ extract 47 40) sym_argv_0_80)))\n (let (($x1876 (= (_ bv0 8) ?x29)))\n (let ((?x7628 (ite $x1876 (_ bv576460752303357900 64) ?x26332)))\n (let ((?x31 ((_ extract 55 48) sym_argv_0_80)))\n (let (($x30711 (= (_ bv0 8) ?x31)))\n (let ((?x28781 (ite $x30711 (_ bv576460752303357899 64) ?x7628)))\n (let ((?x18 ((_ extract 63 56) sym_argv_0_80)))\n (let (($x28928 (= (_ bv0 8) ?x18)))\n (let ((?x4827 (ite $x28928 (_ bv576460752303357898 64) ?x28781)))\n (let ((?x24 ((_ extract 71 64) sym_argv_0_80)))\n (let (($x9977 (= (_ bv0 8) ?x24)))\n (let ((?x28772 (ite $x9977 (_ bv576460752303357897 64) ?x4827)))\n (= ?x28772 ?x20370))))))))))))))))))))))))))))))\n(assert\n (let (($x14775 (= (_ bv0 64) unconstrained_ret_mbrtowc_1567_64)))\n (not $x14775)))\n(assert\n (let (($x11758 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1567_64)))\n (not $x11758)))\n(assert\n (let (($x19180 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1567_64)))\n (not $x19180)))\n(assert\n (let (($x29038 (= (_ bv0 64) unconstrained_ret_mbrtowc_1283_64)))\n (not $x29038)))\n(assert\n (let (($x15651 (= (_ bv18446744073709551615 64) unconstrained_ret_mbrtowc_1283_64)))\n (not $x15651)))\n(assert\n (let (($x17343 (= (_ bv18446744073709551614 64) unconstrained_ret_mbrtowc_1283_64)))\n (not $x17343)))\n(assert\n (let ((?x35378 (bvadd unconstrained_ret_mbrtowc_1283_64 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x18479 (bvadd ?x35378 unconstrained_ret_mbrtowc_1567_64)))\n (let (($x46844 (bvule strlen_1255_64 ?x18479)))\n (not $x46844)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (bvule (_ bv576460752303357896 64) ?x28444)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (let ((?x26727 ((_ extract 63 59) ?x28444)))\n (= (_ bv0 5) ?x26727))))))\n(assert\n (let ((?x14984 ((_ extract 58 0) unconstrained_ret_mbrtowc_1567_64)))\n (let ((?x38773 ((_ extract 58 0) unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x38730 ((_ extract 58 0) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x37850 (bvadd (_ bv576460752303357896 59) ?x38730)))\n (let ((?x34709 (bvadd ?x37850 ?x38773)))\n (let ((?x24577 (bvadd ?x34709 ?x14984)))\n (bvule ?x24577 (_ bv576460752303357905 59)))))))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (let (($x35933 (and (distinct (_ bv576460752303357905 64) ?x28444) true)))\n (let (($x42925 (and (distinct (_ bv576460752303357902 64) ?x28444) true)))\n (let (($x21736 (and (distinct (_ bv576460752303357904 64) ?x28444) true)))\n (let (($x30350 (and (distinct (_ bv576460752303357896 64) ?x28444) true)))\n (and $x30350 $x21736 $x42925 $x35933)))))))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (and (distinct ?x28444 (_ bv576460752303357898 64)) true)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (and (distinct ?x28444 (_ bv576460752303357900 64)) true)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (and (distinct ?x28444 (_ bv576460752303357899 64)) true)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (and (distinct ?x28444 (_ bv576460752303357903 64)) true)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (and (distinct ?x28444 (_ bv576460752303357897 64)) true)))))\n(assert\n (let ((?x35069 (bvadd (_ bv576460752303357896 64) unconstrained_ret_mbrtowc_1283_64)))\n (let ((?x15761 (bvadd ?x35069 unconstrained_ret_mbrtowc_1428_64)))\n (let ((?x28444 (bvadd ?x15761 unconstrained_ret_mbrtowc_1567_64)))\n (and (distinct ?x28444 (_ bv576460752303357901 64)) true)))))\n(check-sat)\n",
    "time": 28.944101572036743,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=2, tm_hour=21, tm_min=47, tm_sec=5, tm_wday=2, tm_yday=337, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            11.758164882659912
        ]
    }
}