{
    "filename": "pr",
    "script": "; benchmark generated from python API\n(set-info :status unknown)\n(declare-fun mem_fffffffffffff80c_25606_32 () (_ BitVec 32))\n(assert\n (let (($x225517 (bvsle (_ bv4294965396 32) mem_fffffffffffff80c_25606_32)))\n (not $x225517)))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let (($x693282 (= ?x662443 (_ bv0 29))))\n (not $x693282))))))))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let ((?x485889 (concat (_ bv0 35) ?x662443)))\n (let ((?x601797 (bvmul (_ bv3435973837 64) ?x485889)))\n (let ((?x648074 ((_ extract 63 35) ?x601797)))\n (let (($x674986 (= ?x648074 (_ bv0 29))))\n (not $x674986)))))))))))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let ((?x485889 (concat (_ bv0 35) ?x662443)))\n (let ((?x601797 (bvmul (_ bv3435973837 64) ?x485889)))\n (let ((?x648074 ((_ extract 63 35) ?x601797)))\n (let ((?x255828 (concat (_ bv0 35) ?x648074)))\n (let ((?x639826 (bvmul (_ bv3435973837 64) ?x255828)))\n (let ((?x639844 ((_ extract 63 35) ?x639826)))\n (let (($x653041 (= ?x639844 (_ bv0 29))))\n (not $x653041))))))))))))))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let ((?x485889 (concat (_ bv0 35) ?x662443)))\n (let ((?x601797 (bvmul (_ bv3435973837 64) ?x485889)))\n (let ((?x648074 ((_ extract 63 35) ?x601797)))\n (let ((?x255828 (concat (_ bv0 35) ?x648074)))\n (let ((?x639826 (bvmul (_ bv3435973837 64) ?x255828)))\n (let ((?x639844 ((_ extract 63 35) ?x639826)))\n (let ((?x645086 (concat (_ bv0 35) ?x639844)))\n (let ((?x550939 (bvmul (_ bv3435973837 64) ?x645086)))\n (let ((?x386960 ((_ extract 63 35) ?x550939)))\n (let (($x562487 (= ?x386960 (_ bv0 29))))\n (not $x562487)))))))))))))))))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let ((?x485889 (concat (_ bv0 35) ?x662443)))\n (let ((?x601797 (bvmul (_ bv3435973837 64) ?x485889)))\n (let ((?x648074 ((_ extract 63 35) ?x601797)))\n (let ((?x255828 (concat (_ bv0 35) ?x648074)))\n (let ((?x639826 (bvmul (_ bv3435973837 64) ?x255828)))\n (let ((?x639844 ((_ extract 63 35) ?x639826)))\n (let ((?x645086 (concat (_ bv0 35) ?x639844)))\n (let ((?x550939 (bvmul (_ bv3435973837 64) ?x645086)))\n (let ((?x386960 ((_ extract 63 35) ?x550939)))\n (let ((?x545348 (concat (_ bv0 35) ?x386960)))\n (let ((?x584513 (bvmul (_ bv3435973837 64) ?x545348)))\n (let ((?x411273 ((_ extract 63 35) ?x584513)))\n (let (($x692180 (= ?x411273 (_ bv0 29))))\n (not $x692180))))))))))))))))))))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let ((?x485889 (concat (_ bv0 35) ?x662443)))\n (let ((?x601797 (bvmul (_ bv3435973837 64) ?x485889)))\n (let ((?x648074 ((_ extract 63 35) ?x601797)))\n (let ((?x255828 (concat (_ bv0 35) ?x648074)))\n (let ((?x639826 (bvmul (_ bv3435973837 64) ?x255828)))\n (let ((?x639844 ((_ extract 63 35) ?x639826)))\n (let ((?x645086 (concat (_ bv0 35) ?x639844)))\n (let ((?x550939 (bvmul (_ bv3435973837 64) ?x645086)))\n (let ((?x386960 ((_ extract 63 35) ?x550939)))\n (let ((?x545348 (concat (_ bv0 35) ?x386960)))\n (let ((?x584513 (bvmul (_ bv3435973837 64) ?x545348)))\n (let ((?x411273 ((_ extract 63 35) ?x584513)))\n (let ((?x538040 (concat (_ bv0 35) ?x411273)))\n (let ((?x669859 (bvmul (_ bv3435973837 64) ?x538040)))\n (let ((?x522386 ((_ extract 63 35) ?x669859)))\n (let (($x564032 (= ?x522386 (_ bv0 29))))\n (not $x564032)))))))))))))))))))))))\n(assert\n (let ((?x670703 (bvmul (_ bv4294967295 32) mem_fffffffffffff80c_25606_32)))\n (let ((?x604296 (bvadd (_ bv4294965396 32) ?x670703)))\n (let ((?x659830 (concat (_ bv0 32) ?x604296)))\n (let ((?x672185 (bvmul (_ bv3435973837 64) ?x659830)))\n (let ((?x662443 ((_ extract 63 35) ?x672185)))\n (let ((?x485889 (concat (_ bv0 35) ?x662443)))\n (let ((?x601797 (bvmul (_ bv3435973837 64) ?x485889)))\n (let ((?x648074 ((_ extract 63 35) ?x601797)))\n (let ((?x255828 (concat (_ bv0 35) ?x648074)))\n (let ((?x639826 (bvmul (_ bv3435973837 64) ?x255828)))\n (let ((?x639844 ((_ extract 63 35) ?x639826)))\n (let ((?x645086 (concat (_ bv0 35) ?x639844)))\n (let ((?x550939 (bvmul (_ bv3435973837 64) ?x645086)))\n (let ((?x386960 ((_ extract 63 35) ?x550939)))\n (let ((?x545348 (concat (_ bv0 35) ?x386960)))\n (let ((?x584513 (bvmul (_ bv3435973837 64) ?x545348)))\n (let ((?x411273 ((_ extract 63 35) ?x584513)))\n (let ((?x538040 (concat (_ bv0 35) ?x411273)))\n (let ((?x669859 (bvmul (_ bv3435973837 64) ?x538040)))\n (let ((?x522386 ((_ extract 63 35) ?x669859)))\n (let ((?x539496 (concat (_ bv0 35) ?x522386)))\n (let ((?x586247 (bvmul (_ bv3435973837 64) ?x539496)))\n (let ((?x552174 ((_ extract 63 35) ?x586247)))\n (= ?x552174 (_ bv0 29))))))))))))))))))))))))))\n(check-sat)\n",
    "time": 3.76285457611084,
    "stamp": "time.struct_time(tm_year=2020, tm_mon=12, tm_mday=1, tm_hour=8, tm_min=20, tm_sec=34, tm_wday=1, tm_yday=336, tm_isdst=0)",
    "solving_time_dic": {
        "z3": [
            2.0588648319244385
        ]
    }
}